//==============================================================================
// タイトル     :   リザルトモードオブジェクト
// ファイル名   :   result.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/11 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "title.h"
#include "result.h"
#include "main.h"
#include "fade.h"
#include "sceneGL2D.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CResult()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CResult::CResult( bool isClear )
{
}

//==============================================================================
// 関数名 : ~CResult()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CResult::~CResult()
{

}

//==============================================================================
// 関数名 : bool Init( void )
// 引数   : void
// 戻り値 : void
// 説明   : 初期化処理
//==============================================================================
bool CResult::Init( void )
{
	CSceneGL2D::Create( "data\\TEXTURE\\fighter00.png" );
	return true;
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CResult::Uninit( void )
{
	//---------------------------------------------
	// [ 各シーンの解放処理 ]
	//---------------------------------------------
	CScene::ReleaseAll();
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CResult::Update( void )
{
	//---------------------------------------------
	// [ 各シーンの更新処理 ]
	//---------------------------------------------
	CScene::UpdateAll();

	//---------------------------------------------
	// [ モード切り替え ]
	//---------------------------------------------
	CInput* pInput = CInput::GetInput( INPUT_TYPE_DX_KEYBOARD );

	if( pInput != NULL )
	{
		if( pInput->GetTrigger( DIK_RETURN ) )
		{
			CFade::FadeStart( new CTitle , 30 );
		}
	}

}

//==============================================================================
// 関数名 : void Draw( void )
// 引数   : void
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CResult::Draw( void )
{
	//---------------------------------------------
	// [ 各シーンの描画処理 ]
	//---------------------------------------------
	CScene::DrawAll();
}
