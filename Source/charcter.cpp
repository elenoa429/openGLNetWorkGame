//==============================================================================
// タイトル     :   キャラクター基底クラス
// ファイル名   :   charcter.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/11/21
//==============================================================================

//==============================================================================
// 更新履歴: -2016/11/21 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "charcter.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CCharcter()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CCharcter::CCharcter()
{

}

//==============================================================================
// 関数名 : ~CCharcter()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CCharcter::~CCharcter()
{

}

//==============================================================================
// 関数名 : bool Init( TYPE type )
// 引数   : void
// 戻り値 : bool型 : 成功判定
// 説明   : 初期化処理
//==============================================================================
bool CCharcter::Init( TYPE type )
{
	// モデルワーク生成処理
	m_pModelManager = CParentModelManagerGL::Create();

	if( m_pModelManager == NULL )
	{
		return false;
	}

	// モーション生成
	m_pMotion = CMotionGL::Create( "data\\ANIMATION\\miku_01_01.anm" );

	if( m_pMotion == NULL )
	{
		return false;
	}

	// 処理成功
	return false;
}

//==============================================================================
// 関数名 : void Uninit()
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CCharcter::Uninit()
{
	// モデル処理の解放
	if( m_pModelManager != NULL )
	{
		m_pModelManager->Release();
		m_pModelManager = NULL;
	}

	// モーション処理解放
	if( m_pMotion != NULL )
	{
		m_pMotion->Release();
		m_pMotion = NULL;
	}
}

//==============================================================================
// 関数名 : void Update()
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CCharcter::Update( void )
{
	//---------------------------------------------------
	// [ モーション処理 ]
	//---------------------------------------------------
	if( m_pMotion != NULL )
	{
		m_pMotion->Update();
		m_pMotion->SetMotionData( m_pModelManager );
	}

	if( m_pModelManager != NULL )
	{
		m_pModelManager->Update();
	}
}

//==============================================================================
// 関数名 : void Draw()
// 引数   : void
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CCharcter::Draw( void )
{
	// ----------------------------------------------------------------------
	// [ ワールドマトリックスの生成処理 ]
	// ----------------------------------------------------------------------
	MATRIX mtxRot , mtxTrans;													// 行列用ワーク
	MatrixIdentity( &m_mtxWorld );												// 行列初期化

	MatrixRotationYawPitchRoll( &mtxRot , m_rot.y , m_rot.x , m_rot.z );		// 回転の行列を算出
	MatrixMultiply( &m_mtxWorld , &m_mtxWorld , &mtxRot );						// 回転行列の合成

	MatrixTranslation( &mtxTrans , m_pos.x , m_pos.y , m_pos.z );				// 位置の行列を算出
	MatrixMultiply( &m_mtxWorld , &m_mtxWorld , &mtxTrans );					// 位置行列の合成

	// モデルの描画
	m_pModelManager->Draw( &m_mtxWorld );
}

//==============================================================================
// 関数名 : サンプル
// 引数   : void
// 戻り値 : void
// 説明   : サンプル処理
//==============================================================================

