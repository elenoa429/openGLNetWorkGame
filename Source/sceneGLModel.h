//==============================================================================
// タイトル     :   OpenGL用モデル描画用クラス
// ファイル名   :   sceneGLModel.h
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/06/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/06/11 数藤凌哉
//           ・制作開始
//           -2016/09/02
//           ・データ形式をSUBSET構造体から引っ張り出す形式に変更
//==============================================================================

//==============================================================================
// インクルードガード
//==============================================================================
#pragma once

//==============================================================================
// インクルードファイル
//==============================================================================
#include "main.h"
#include "sceneGL.h"

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// 前方宣言
//==============================================================================

//==============================================================================
// クラス宣言
//==============================================================================
class CSceneGLModel : public CSceneGL
{
	//---------------------------------------------
	// [ メンバ関数 ]
	//---------------------------------------------
public:
	// コンストラクタ
	CSceneGLModel();

	// デストラクタ
	~CSceneGLModel();

	// 生成処理
	static CSceneGLModel* Create( char* modelFileName );

	// 初期化処理
	virtual bool Init( char* modelFileName );

	// 終了処理
	virtual void Uninit( void );

	// 更新処理
	virtual void Update( void );

	// 描画処理
	virtual void Draw( void );

	// 位置関連
	virtual VECTOR3 GetPos( void ){ return m_pos; }
	virtual void SetPos( VECTOR3 pos ){ m_pos = pos; }

	// サイズ関連
	virtual VECTOR3 GetSize( void ){ return m_size; }
	virtual void SetSize( VECTOR3 size ){ m_size = size; }

	// 角度関連
	virtual VECTOR3 GetRot( void ){ return m_rot; }
	virtual void SetRot( VECTOR3 rot ){ m_rot = rot; }

	// 色関連
	virtual COLOR_F32 GetCol( void ){ return m_col; }
	virtual void SetCol( COLOR_F32 col ){ m_col = col; }

	// フラグ関連
	bool GetTexEnable( void ){ return m_isTexEnable; }
	bool GetMatEnable( void ){ return m_isMatEnable; }

	void SetTexEnable( bool flags ){ m_isTexEnable = flags; }
	void SetMatEnable( bool flags ){ m_isMatEnable = flags; }

	//---------------------------------------------
	// [ メンバ変数 ]
	//---------------------------------------------
protected:
	VECTOR3    m_pos;					// 位置
	VECTOR3    m_rot;					// 回転角
	VECTOR3    m_size;					// サイズ( 直径 )
	COLOR_F32  m_col;					// 色
	VECTOR3    m_nor;					// 法線
	VECTOR3    m_scl;					// スケール値

	MATRIX     m_mtxWorld;				// ワールドマトリクス

	LPTexture  m_pTexture;				// テクスチャへのポインタ

	LPModel    m_pModel;				// モデルデータ
	DWORD      m_numMat;				// マテリアル数
	LPMaterial m_pMat;					// マテリアルへのポインタ

	bool m_bMove;						// 移動操作受付判定
	bool m_isTexEnable;					// テクスチャ有効判定
	bool m_isMatEnable;					// マテリアル有効判定

};

//==============================================================================
// プロトタイプ宣言
//==============================================================================
