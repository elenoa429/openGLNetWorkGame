//==============================================================================
// タイトル     :   OpenGL用2D描画用クラス
// ファイル名   :   sceneGL2D.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/04/22
//==============================================================================

//==============================================================================
// 更新履歴: -2016/04/22 数藤凌哉
//           ・制作開始
//           -2016/05/09
//           ・基本となる処理の追加
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "sceneGL2D.h"
#include "rendererGL.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 関数名 : CSceneGL2D
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CSceneGL2D::CSceneGL2D()
{
	m_pos      = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_rot      = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_size     = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_col      = COLOR_F32( 1.0f , 1.0f , 1.0f , 1.0f );
	m_pTexture = NULL;
}

//==============================================================================
// 関数名 : ~CSceneGL2D
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CSceneGL2D::~CSceneGL2D()
{
}

//==============================================================================
// 関数名 : CSceneGL2D* Create( char* texPath )
// 引数   : char* texPath : テクスチャファイルパス
// 戻り値 : CSceneGL2D*型
// 説明   : 生成処理
//==============================================================================
CSceneGL2D* CSceneGL2D::Create( char* texPath )
{
	CSceneGL2D* pNewInstance = new CSceneGL2D;

	if( pNewInstance->Init( texPath ) == false )
	{
		pNewInstance->Release();
		pNewInstance = NULL;
	}

	return pNewInstance;
}

//==============================================================================
// 関数名 : bool Init( char* texPath )
// 引数   : void
// 戻り値 : bool型
// 説明   : 初期化処理
//==============================================================================
bool CSceneGL2D::Init( char* texPath )
{
	//---------------------------------
	// [ 値初期化 ]
	//---------------------------------
	m_pos  = VECTOR3( 100.0f , 100.0f , 0.0f );
	m_rot  = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_size = VECTOR3( 100.0f , 100.0f , 0.0f );

	//---------------------------------
	// [ テクスチャ読み込み処理 ]
	//---------------------------------
	CRenderer* pRenderer = GetManager()->GetRenderer();			// レンダラーの取得
	pRenderer->CreateTexture( texPath , &m_pTexture );			// テクスチャ生成

	return true;			// 処理成功
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CSceneGL2D::Uninit( void )
{
	if( m_pTexture != NULL )
	{
		m_pTexture->Release();
		delete m_pTexture;
		m_pTexture = NULL;
	}
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CSceneGL2D::Update( void )
{

}

//==============================================================================
// 関数名 : void Draw( void )
// 引数   : void
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CSceneGL2D::Draw( void )
{
	//---------------------------------
	// [ 描画前設定 ]
	//---------------------------------
	glEnable( GL_BLEND );
	glBlendFunc( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA );
	glDisable( GL_DEPTH_TEST );													// ZバッファーOFF

	/*
	glDisable( GL_LIGHTING );

	glEnable( GL_ALPHA_TEST );
	glAlphaFunc( GL_GREATER , 0.0f );*/

	if( m_pTexture != NULL )
	{
		m_pTexture->Set();		// テクスチャ設定
	}

	//---------------------------------
	// [ カメラ設定処理 ]
	//---------------------------------
	CCameraGL* pCamera = ( CCameraGL* )GetManager()->GetCamera();	// カメラ取得
	pCamera->Set2D();			// 2Dカメラ設定

	//---------------------------------
	// [ ポリゴン描画処理 ]
	//---------------------------------
	float halfX = m_size.x * 0.5f;
	float halfY = m_size.y * 0.5f;

	glBegin( GL_TRIANGLE_STRIP );
	{
		glTexCoord2f( 0.0f , 0.0f );
		glColor4f( 1.0f , 1.0f , 1.0f , 1.0f );
		glVertex3f( m_pos.x - halfX , m_pos.y - halfY , 0.0f );

		glTexCoord2f( 1.0f , 0.0f );
		glColor4f( 1.0f , 1.0f , 1.0f , 1.0f );
		glVertex3f( m_pos.x + halfX , m_pos.y - halfY , 0.0f );

		glTexCoord2f( 0.0f , 1.0f );
		glColor4f( 1.0f , 1.0f , 1.0f , 1.0f );
		glVertex3f( m_pos.x - halfX , m_pos.y + halfY , 0.0f );

		glTexCoord2f( 1.0f , 1.0f );
		glColor4f( 1.0f , 1.0f , 1.0f , 1.0f );
		glVertex3f( m_pos.x + halfX , m_pos.y + halfY , 0.0f );
	}
	glEnd();

	//---------------------------------
	// [ 描画後処理 ]
	//---------------------------------
	glBlendFunc( GL_ONE , GL_ZERO );
	glDisable( GL_BLEND );

	glEnable( GL_DEPTH_TEST );													// ZバッファーON
	
	pCamera->End2D();															// 2Dカメラ終了設定
}
