//==============================================================================
// タイトル     :   文字列関係処理の抽象クラス
// ファイル名   :   font.h
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/05/18
//==============================================================================

//==============================================================================
// 更新履歴: -2016/05/18 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードガード
//==============================================================================
#pragma once

//==============================================================================
// インクルードファイル
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================
//#define FONT_LIMIT_OUT_BUFF_SIZE	( 1024 )	// 出力バッファーのサイズの最大値

#define OUT_BUFF_SIZE_WIDTH			( 256 )		// 出力バッファーの幅サイズ
#define OUT_BUFF_SIZE_HEIGHT		( 32 )		// 出力バッファーの高さサイズ

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// クラス宣言
//==============================================================================
class CFont
{
	/* ===メンバ関数=== */
public:
	CFont();												// デフォルトコンストラクタ
	~CFont();												// デストラクタ

	virtual bool Init( void );								// 初期化処理
	virtual void Uninit( void );							// 終了処理
	virtual void Update( void ) = 0;						// 更新処理
	virtual void Draw( int x = 0 , int y = 0 ) = 0;			// 描画処理

	bool Cat( char* source );								// 出力バッファーの文字列との連結
	bool Print( char* fmt , ... );							// 出力バッファーへのデータ出力処理
	void ResetBuff( void );									// 出力バッファーのリセット

	/* ===メンバ変数=== */
protected:
	unsigned int m_BuffSize;								// 出力バッファーのサイズ

	union
	{
		char m_outBuffW[ OUT_BUFF_SIZE_HEIGHT * OUT_BUFF_SIZE_WIDTH ];		// 出力バッファー( 1次配列 )
		char m_outBuffHW[ OUT_BUFF_SIZE_HEIGHT ][ OUT_BUFF_SIZE_WIDTH ];	// 出力バッファー( 2次配列 )
	};

	int m_refHIdx;											// 現在参照している出力バッファーの高さインデックス
};


//==============================================================================
// プロトタイプ宣言
//==============================================================================
