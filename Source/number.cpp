//==============================================================================
// タイトル     :   数字表示の基底クラス
// ファイル名   :   number.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/06/19
//==============================================================================

//==============================================================================
// 更新履歴: -2016/06/19 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "number.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CNumber()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CNumber::CNumber()
{
	m_number  = 0;
	m_texDivW = 0;
	m_texDivH = 0;

	m_pos    = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_size   = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_col    = COLOR_F32( 1.0f , 1.0f , 1.0f , 1.0f );
	m_tex    = VECTOR2( 0.0f , 0.0f );
	m_texLen = VECTOR2( 1.0f , 1.0f );
}

//==============================================================================
// 関数名 : ~CNumber()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CNumber::~CNumber()
{

}

//==============================================================================
// 関数名 : void Release( void )
// 引数   : void
// 戻り値 : void
// 説明   : 解放処理
//==============================================================================
void CNumber::Release( void )
{
	this->Uninit();
	delete this;
}

//==============================================================================
// 関数名 : bool Init( int texDivW , int texDivH )
// 引数   : int texDivW : テクスチャ分割数( 横 )
//          int texDivH : テクスチャ分割数( 縦 )
// 戻り値 : bool型      : 処理結果
// 説明   : 初期化処理
//==============================================================================
bool CNumber::Init( int texDivW , int texDivH )
{
	// エラーチェック
	if( texDivW <= 0 || texDivH <= 0 )
	{
		this->Release();
		return false;			// 分割数0以下はありえないため、処理失敗
	}

	// 分割数格納
	m_texDivW = texDivW;
	m_texDivH = texDivH;

	// テクスチャ長算出
	m_texLen.x = ( 1.0f / m_texDivW );
	m_texLen.y = ( 1.0f / m_texDivH );

	return true;				// 処理成功
}

//==============================================================================
// 関数名 : void SetNum( int value )
// 引数   : int value : 表示したい値( 0 〜 9 )
// 戻り値 : void
// 説明   : 数字設定
//==============================================================================
void CNumber::SetNum( int value )
{
	// 設定数値のクランプ
	if( value < 0 ) value = 0;
	else if( value > 9 ) value = 9;

	// 値格納
	m_number = value;

	// テクスチャ座標の算出
	VECTOR2 texIdx = VECTOR2( 0.0f , 0.0f );
	int idxW = value % m_texDivW;
	int idxH = ( int )( ( float )value / ( float )m_texDivW );

	texIdx.x = m_texLen.x * idxW;
	texIdx.y = m_texLen.y * idxH;

	m_tex = texIdx;

}



