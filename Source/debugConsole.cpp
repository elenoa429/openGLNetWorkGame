//==============================================================================
// タイトル     :   デバッグ用コンソールクラス
// ファイル名   :   debugConsole.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/11/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/11/11 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// WANING防止
//==============================================================================
#define _CRT_SECURE_NO_WARNINGS

//==============================================================================
// インクルードファイル
//==============================================================================
#include "debugConsole.h"
#include <stdio.h>

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================
#define CONSOLE_BUFFER_LEN ( 1024 )

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : bool Init()
// 引数   : void
// 戻り値 : bool型 : 処理結果
// 説明   : 初期化処理
//==============================================================================
bool CDebugConsole::Init()
{
	// コンソール初期化処理
	if( AllocConsole() == FALSE )										// コンソール割当
	{
		return false;
	}

	m_hStdOutput = GetStdHandle( STD_OUTPUT_HANDLE );					// 標準出力ハンドル取得
	GetConsoleScreenBufferInfo( m_hStdOutput , &m_screenBuffer );		// スクリーンバッファー情報取得

	// コンソールの閉じるメニューを消す
	HMENU hmenu = GetSystemMenu( GetConsoleWindow() , FALSE );

	if( RemoveMenu( hmenu , SC_CLOSE , MF_BYCOMMAND ) == FALSE )
	{
		return false;
	}

	return true;
}

//==============================================================================
// 関数名 : void Uninit()
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CDebugConsole::Uninit()
{
	FreeConsole();														// コンソール解放
}

//==============================================================================
// 関数名 : bool Print( char *fmt , ... )
// 引数   : char* str : 出力文字列
// 戻り値 : bool型    : 処理結果
// 説明   : 出力バッファーへの書き込み処理
//==============================================================================
bool CDebugConsole::Print( char *fmt , ... )
{
#ifndef DEBUG_PROC_DISABLE
	// 可変引数から文字列生成
	va_list ap;															// 可変引数用のポインタ
	char aSourceBuff[ CONSOLE_BUFFER_LEN ] = { 0 };						// 取得情報のバッファー
	bool bResult = false;												// 処理結果

	va_start( ap , fmt );												// 可変引数を用いる設定
	vsprintf( &aSourceBuff[ 0 ] , fmt , ap );							// 取得した情報を格納
	va_end( ap );														// 可変引数設定終了

	// 文字列をコンソールに描画
	DWORD dwWriteByte;
	BOOL result;

	result = WriteConsole( m_hStdOutput , aSourceBuff , strlen( aSourceBuff ) , &dwWriteByte , NULL );

	return result == TRUE ? true : false;								// 処理結果の返却
#endif

	return false;
}

//==============================================================================
// 関数名 : 
// 引数   : void
// 戻り値 : void
// 説明   : 
//==============================================================================

