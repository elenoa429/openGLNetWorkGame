//==============================================================================
// タイトル     :   入力処理
// ファイル名   :   input.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/04/25
//==============================================================================

//==============================================================================
// 更新履歴: -2016/04/25 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "input.h"

#include "input_DX_Keyboard.h"
#include "input_DX_mause.h"
#include "input_DX_editorMause.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================
CInput* CInput::m_apInput[ INPUT_TYPE_MAX ] = { NULL };
int     CInput::m_numInstance = 0;

//==============================================================================
// 関数名 : CInput()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CInput::CInput()
{
	m_numInstance++;					// 生成インスタンス数増加
}

//==============================================================================
// 関数名 : ~CInput()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CInput::~CInput()
{
	m_numInstance--;					// 生成インスタンス数減少
}

//==============================================================================
// 関数名 : CInput* Create( INPUT_TYPE type , HINSTANCE hInstance , HWND hWnd )
// 引数   : INPUT_TYPE type      : 生成する入力系統の種類
//          HINSTANCE  hInstance : インスタンスハンドル
//          HWND       hWnd      : ウィンドウハンドル
// 戻り値 : CInput*型
// 説明   : 入力系統生成処理
//==============================================================================
CInput* CInput::Create( INPUT_TYPE type , HINSTANCE hInstance , HWND hWnd )
{
	CInput* pNewInstance = NULL;

	/* ===取得したタイプに応じた入力系統の生成=== */
	switch( type )
	{
		case INPUT_TYPE_DX_KEYBOARD:
		{
			pNewInstance = new CInputDXKeyboard;
			break;
		}

		case INPUT_TYPE_DX_MOUSE:
		{
			pNewInstance = new CInputDXMause;
			break;
		}

		case INPUT_TYPE_EDITOR_MOUSE:
		{
			pNewInstance = new CInputEditorMause;
			type         = INPUT_TYPE_DX_MOUSE;
			break;
		}

		default:
		{
			break;
		}
	}

	/* ===初期化処理=== */
	if( pNewInstance->Init( hInstance , hWnd ) == false )
	{
		pNewInstance->Uninit();
		delete pNewInstance;
		pNewInstance = NULL;
	}

	m_apInput[ type ] = pNewInstance;	// インスタンスワークに登録

	return pNewInstance;	// 生成したインスタンスの返却
}

//==============================================================================
// 関数名 : CInput* GetInput( INPUT_TYPE type )
// 引数   : INPUT_TYPE type : 取得する入力系統の種類
// 戻り値 : CInput*型
// 説明   : 入力系統取得処理
//==============================================================================
CInput* CInput::GetInput( INPUT_TYPE type )
{
	return m_apInput[ type ];
}

//==============================================================================
// 関数名 : void UpdateAll( void )
// 引数   : void
// 戻り値 : void
// 説明   : 登録されたインスタンス全ての更新処理
//==============================================================================
void CInput::UpdateAll( void )
{
	for( int instanceCnt = 0 ; instanceCnt < INPUT_TYPE_MAX ; instanceCnt++ )
	{
		if( m_apInput[ instanceCnt ] != NULL )
		{
			m_apInput[ instanceCnt ]->Update();
		}
	}
}

//==============================================================================
// 関数名 : void UpdateAll( void )
// 引数   : void
// 戻り値 : void
// 説明   : 登録されたインスタンス全ての解放処理
//==============================================================================
void CInput::ReleaseALL( void )
{
	for( int instanceCnt = 0 ; instanceCnt < INPUT_TYPE_MAX ; instanceCnt++ )
	{
		if( m_apInput[ instanceCnt ] != NULL )
		{
			m_apInput[ instanceCnt ]->Uninit();
			delete m_apInput[ instanceCnt ];
			m_apInput[ instanceCnt ] = NULL;
		}
	}
}
