//==============================================================================
// タイトル     :   フェード処理
// ファイル名   :   fade.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/11 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "fade.h"
#include "main.h"
#include "mode.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================
CMode* CFade::m_pNext = NULL;

int CFade::m_fadeCnt  = 0;
int CFade::m_fadeTime = 0;

CFade::FADE_STATE CFade::m_state = CFade::FADE_WAIT;

COLOR_F32 CFade::m_col     = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );
COLOR_F32 CFade::m_colMove = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );

//==============================================================================
// 関数名 : bool Init( char* texPath )
// 引数   : char* texPath : テクスチャファイルパス
// 戻り値 : bool型
// 説明   : 初期化処理
//==============================================================================
bool CFade::Init( char* texPath )
{
	

	return true;
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CFade::Uninit( void )
{
	
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CFade::Update( void )
{
	// 待機状態では処理しない
	if( m_state == FADE_WAIT )
	{
		return;
	}

	// 色変化
	m_col.r += m_colMove.r;
	m_col.g += m_colMove.g;
	m_col.b += m_colMove.b;
	m_col.a += m_colMove.a;

	//----------------------------------------------
	// [ 状態遷移処理 ]
	//----------------------------------------------
	if( m_fadeCnt >= m_fadeTime )
	{
		// 現在状態に応じた設定
		switch( m_state )
		{
			case FADE_IN:
			{
				m_state = FADE_WAIT;					// 状態 : フェード待機状態に
				m_fadeCnt = 0;
				break;
			}

			case FADE_OUT:
			{
				// パラメータ設定
				m_state = FADE_IN;						// 状態 : フェードインに

				float dt;								// 色係数

				m_fadeTime == 0 ? dt = 1.0f : dt = 1.0f / ( float )m_fadeTime;

				m_colMove.r = ( 0.0f - m_col.r ) * dt;
				m_colMove.g = ( 0.0f - m_col.g ) * dt;
				m_colMove.b = ( 0.0f - m_col.b ) * dt;
				m_colMove.a = ( 0.0f - m_col.a ) * dt;

				m_fadeCnt = 0;

				// モード遷移
				GetManager()->SetMode( m_pNext );

				break;
			}
		}
	}

	// カウンタ処理
	m_fadeCnt++;
}

//==============================================================================
// 関数名 : void Draw( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CFade::Draw( void )
{
	//---------------------------------
	// [ 描画前設定 ]
	//---------------------------------
	glEnable( GL_BLEND );
	glBlendFunc( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA );
	glDisable( GL_DEPTH_TEST );											// ZバッファーOFF
	glDisable( GL_TEXTURE_2D );											// テクスチャ無効化

	//---------------------------------
	// [ カメラ設定処理 ]
	//---------------------------------
	CCameraGL* pCamera = ( CCameraGL* )GetManager()->GetCamera();		// カメラ取得
	pCamera->Set2D();													// 2Dカメラ設定

	//---------------------------------
	// [ ポリゴン描画処理 ]
	//---------------------------------
	glBegin( GL_TRIANGLE_STRIP );
	{
		glTexCoord2f( 0.0f , 1.0f );
		glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
		glVertex3f( 0.0f , 0.0f , 0.0f );

		glTexCoord2f( 1.0f , 1.0f );
		glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
		glVertex3f( SCREEN_WIDTH , 0.0f , 0.0f );

		glTexCoord2f( 0.0f , 0.0f );
		glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
		glVertex3f( 0.0f , SCREEN_HEIGHT , 0.0f );

		glTexCoord2f( 1.0f , 0.0f );
		glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
		glVertex3f( SCREEN_WIDTH , SCREEN_HEIGHT , 0.0f );
	}
	glEnd();

	//---------------------------------
	// [ 描画後処理 ]
	//---------------------------------
	glBlendFunc( GL_ONE , GL_ZERO );
	glDisable( GL_BLEND );

	glEnable( GL_DEPTH_TEST );													// ZバッファーON
	glEnable( GL_TEXTURE_2D );													// テクスチャ無効化

	pCamera->End2D();															// 2Dカメラ終了設定
}

//==============================================================================
// 関数名 : bool FadeStart( CMode* modeNext , int time )
// 引数   : CMode* modeNext : 次モード
//          int time        : フェードにかける時間( IN 〜 OUT の累計 )
// 戻り値 : bool型
// 説明   : フェード開始処理
//==============================================================================
bool CFade::FadeStart( CMode* modeNext , int time )
{
	// エラーチェック
	if( modeNext == NULL )
	{
		return false;
	}

	if( m_state != FADE_WAIT )
	{
		delete modeNext;
		return false;
	}

	// パラメータ設定
	m_pNext = modeNext;

	m_state = FADE_OUT;						// 状態 : フェードインに

	m_fadeCnt  = 0;
	m_fadeTime = ( int )( time / 2 );		// 時間を設定

	float dt;								// 色係数

	m_fadeTime == 0 ? dt = 1.0f : dt = 1.0f / ( float )m_fadeTime;

	m_colMove.r = ( 1.0f - m_col.r ) * dt;
	m_colMove.g = ( 1.0f - m_col.g ) * dt;
	m_colMove.b = ( 1.0f - m_col.b ) * dt;
	m_colMove.a = ( 1.0f - m_col.a ) * dt;

	return true;
}
