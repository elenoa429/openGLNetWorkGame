//==============================================================================
// タイトル     :   OpenGL用文字列関係処理
// ファイル名   :   fontGL.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/05/18
//==============================================================================

//==============================================================================
// 更新履歴: -2016/05/18 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// WARNING防止
//==============================================================================
#define _CRT_SECURE_NO_WARNINGS

//==============================================================================
// インクルードファイル
//==============================================================================
#include "fontGL.h"
#include "main.h"
#include <gl/gl.h>
#include <gl/glu.h>
#include <stdio.h>
#include <locale.h>
#include <mbstring.h>

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================
#pragma comment( lib , "opengl32.lib" )		// OpenGL用
#pragma comment( lib , "glu32.lib" )		// OpenGL用

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CFontGL()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CFontGL::CFontGL()
{
	m_hFont      = NULL;
	m_hdc        = NULL;
	m_fontHeight = 0;
	m_col        = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );
}

//==============================================================================
// 関数名 : ~CFontGL()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CFontGL::~CFontGL()
{
}

//==============================================================================
// 関数名 : bool Init( int fontSize , char* fontName , unsigned int buffSize )
// 引数   : int fontSize          : フォントの大きさ
//          char* fontName        : フォントの名前
//          COLOR_F32 col       : 色
// 戻り値 : bool型                : 処理結果
// 説明   : 初期化処理
//==============================================================================
bool CFontGL::Init( int fontSize , char* fontName , COLOR_F32 col )
{
	//--------------------------------------------------
	// [ 基底クラスの初期化処理 ]
	//--------------------------------------------------
	CFont::Init();				// 出力バッファーを生成する

	//--------------------------------------------------
	// [ フォント生成処理 ]
	//--------------------------------------------------
	m_hFont = CreateFont(					/* ==フォント生成== */
		fontSize,								// フォント高さ
		0,										// 文字幅
		0,										// テキストの角度
		0,										// ベースラインとｘ軸との角度
		FW_REGULAR,								// フォントの太さ
		FALSE,									// イタリック体
		FALSE,									// アンダーライン
		FALSE,									// 打ち消し線
		SHIFTJIS_CHARSET,						// 文字セット
		OUT_DEFAULT_PRECIS,						// 出力精度
		CLIP_DEFAULT_PRECIS,					// クリッピング精度
		ANTIALIASED_QUALITY,					// 出力品質
		FIXED_PITCH | FF_MODERN,				// ピッチとファミリー
		fontName );								// 書体名

	if( m_hFont == NULL )
	{
		return false;						// 処理失敗
	}

	m_hdc         = wglGetCurrentDC();								// デバイスコンテキスト取得
	m_hFontOrigin = ( HFONT )SelectObject( m_hdc , m_hFont );		// オリジナルのフォントを保存
	m_fontHeight  = fontSize;										// フォントの高さ保持
	m_col         = col;											// 色設定

	return true;							// 処理成功
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CFontGL::Uninit( void )
{
	if( m_hFont != NULL )
	{
		SelectObject( m_hdc , m_hFontOrigin );		// オリジナルのフォントに戻す
		DeleteObject( m_hFont );					// フォントの削除
	}

	CFont::Uninit();								// 基底クラスの終了処理
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CFontGL::Update( void )
{
}

//==============================================================================
// 関数名 : void Draw( int x , int y )
// 引数   : int x , int y : 描画開始位置( 左上原点として考慮 )
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CFontGL::Draw( int x , int y )
{
	//--------------------------------------------------
	// [ 2Dカメラ設定 ]
	//--------------------------------------------------
	GetManager()->GetCamera()->Set2D();
	glDisable( GL_TEXTURE_2D );

	//--------------------------------------------------
	// [ ビットマップディスプレイリスト生成処理 ]
	//--------------------------------------------------
	for( int hCnt = 0 ; hCnt < OUT_BUFF_SIZE_HEIGHT ; hCnt++ )
	{
		int    lengthString = 0;									// 文字列の長さ
		int    list = 0;											// リストのインデックス
		WCHAR* unicodeText;											// textをUNICODEに変換した文字列を格納する

		lengthString = _mbstrlen( &m_outBuffHW[ hCnt ][ 0 ] );		// 文字長取得

		if( lengthString == 0 )
		{
			continue;												// 文字長0の場合のエスケープ処理
		}

		list = glGenLists( lengthString );							// リスト生成

		setlocale( LC_CTYPE , "jpn" );								// 日本語の文字列として扱うよう設定

		unicodeText = new WCHAR[ lengthString + 1 ];				// textの文字数分のワイド文字列の領域を作成

		mbstowcs( &unicodeText[ 0 ] , &m_outBuffHW[ hCnt ][ 0 ] , lengthString );	// マルチバイト文字列をUNICODEに変換する

		//MultiByteToWideChar( CP_ACP , 0 , &m_outBuffHW[ hCnt ][ 0 ] , -1 , unicodeText , ( sizeof( WCHAR ) * lengthString ) + 1 );	// UNICODEに変換する

		for( int i = 0 ; i < lengthString && i < OUT_BUFF_SIZE_WIDTH ; i++ )
		{
			wglUseFontBitmapsW( m_hdc , unicodeText[ i ] , 1 , list + ( DWORD )i );
		}

		glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
		glRasterPos2i( x , y + m_fontHeight + ( m_fontHeight * hCnt ) );

		/* ===ディスプレイリストで描画=== */
		for( int i = 0 , j = 0 ; i < lengthString && i < OUT_BUFF_SIZE_WIDTH && j < OUT_BUFF_SIZE_WIDTH ; i++ )
		{
			glCallList( list + i );									// 文字描画

			j += _mbclen( ( BYTE* )&m_outBuffHW[ hCnt ][ j ] );		// 文字バイトの大きさを確認する
		}

		/* ===ディスプレイリスト破棄=== */
		glDeleteLists( list , lengthString );
		list = 0;
		lengthString = 0;
		delete[] unicodeText;
	}

	glEnable( GL_LIGHTING );

	//--------------------------------------------------
	// [ 2Dカメラ設定解除 ]
	//--------------------------------------------------
	GetManager()->GetCamera()->End2D();
	glEnable( GL_TEXTURE_2D );
}

