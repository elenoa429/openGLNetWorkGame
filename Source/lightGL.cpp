//==============================================================================
// タイトル     :   OpenGL用ライトクラス
// ファイル名   :   lightGL.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/05/23
//==============================================================================

//==============================================================================
// 更新履歴: -2016/05/23 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "lightGL.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CLightGL()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CLightGL::CLightGL()
{
	m_param.pos      = VECTOR4( 0.0f , 0.0f , 0.0f , 0.0f );
	m_param.dir      = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_param.diffuse  = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );
	m_param.ambient  = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );
	m_param.specular = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );
}

//==============================================================================
// 関数名 : ~CLightGL()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CLightGL::~CLightGL()
{

}

//==============================================================================
// 関数名 : void Enable( void )
// 引数   : void
// 戻り値 : void
// 説明   : 有効化処理
//==============================================================================
void CLightGL::Enable( void )
{
	/* ===基底クラスの呼び出し=== */
	CLight::Enable();

	/* ===OpenGL側への有効化設定=== */
	glEnable( CLightGL::GetLightIdGL() );		// 紐付いたライトの有効化
	glEnable( GL_LIGHTING );					// ライト自体の有効化
}

//==============================================================================
// 関数名 : void Disable( void )
// 引数   : void
// 戻り値 : void
// 説明   : 無効化処理
//==============================================================================
void CLightGL::Disable( void )
{
	/* ===基底クラスの呼び出し=== */
	CLight::Disable();

	/* ===OpenGL側への無効化設定=== */
	glDisable( CLightGL::GetLightIdGL() );		// 紐付いたライトの無効化
}

//==============================================================================
// 関数名 : CLightGL* Create( LIGHT_ID id , LIGHT_PARAM* param , LIGHT_TYPE type )
// 引数   : LIGHT_ID id        : 生成対象のID
//          LIGHT_PARAM* param : ライトに関わるパラメータ
//          LIGHT_TYPE type    : ライトの種類
// 戻り値 : CLightGL*型        : 処理結果
// 説明   : 生成処理
//==============================================================================
CLightGL* CLightGL::Create( LIGHT_ID id , LIGHT_PARAM* param , LIGHT_TYPE type )
{
	CLightGL* newInstance = new CLightGL;

	if( newInstance->Init( id , param , type ) == false )
	{
		newInstance->Uninit();
		delete newInstance;
		newInstance = NULL;
	}

	return newInstance;			// 処理成功
}

//==============================================================================
// 関数名 : bool Init( LIGHT_ID id , LIGHT_PARAM* param , LIGHT_TYPE type )
// 引数   : LIGHT_ID id        : 生成対象のID
//          LIGHT_PARAM* param : ライトに関わるパラメータ
//          LIGHT_TYPE type    : ライトの種類
// 戻り値 : bool型             : 処理結果
// 説明   : 初期化処理
//==============================================================================
bool CLightGL::Init( LIGHT_ID id , LIGHT_PARAM* param , LIGHT_TYPE type )
{
	if( m_apLight[ id ] != NULL )
	{
		return false;			// 既にインスタンスが登録されていたため、処理失敗
	}

	CLight::Init( id , type );	// 基底クラスの初期化処理呼び出し

	m_param = *param;			// パラメータ代入

	return true;				// 処理成功
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CLightGL::Uninit( void )
{

}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CLightGL::Update( void )
{

}

//==============================================================================
// 関数名 : void Update( bool enable )
// 引数   : void
// 戻り値 : void
// 説明   : 設定処理
//==============================================================================
void CLightGL::Set( bool enable )
{
	//--------------------------------------------
	// [ パラメータ設定 ]
	//--------------------------------------------
	GLenum lightId = CLightGL::GetLightIdGL();								// 紐付いたIDの取得

	if( enable )
	{
		glEnable( lightId );

		glLightfv( lightId , GL_POSITION       , m_param.pos.v );			// 位置
		glLightfv( lightId , GL_SPOT_DIRECTION , m_param.dir.v );			// 向き
		glLightfv( lightId , GL_AMBIENT        , m_param.ambient.col );		// 環境光
		glLightfv( lightId , GL_DIFFUSE        , m_param.diffuse.col );		// 拡散反射光
		glLightfv( lightId , GL_SPECULAR       , m_param.specular.col );	// 鏡面反射光
	}
	else
	{
		glDisable( lightId );
	}
}

//==============================================================================
// 関数名 : GLenum GetLightIdGL( void )
// 引数   : void
// 戻り値 : GLenum型 : 紐付いたIDの返却
// 説明   : ライトIDの取得処理
//==============================================================================
GLenum CLightGL::GetLightIdGL( void )
{
	/* ===ライトIDのひも付け=== */
	GLenum id;

	switch( m_id )
	{
		case LIGHT0:
		{
			id = GL_LIGHT0;
			break;
		}

		case LIGHT1:
		{
			id = GL_LIGHT1;
			break;
		}

		case LIGHT2:
		{
			id = GL_LIGHT2;
			break;
		}

		case LIGHT3:
		{
			id = GL_LIGHT3;
			break;
		}

		case LIGHT4:
		{
			id = GL_LIGHT4;
			break;
		}

		case LIGHT5:
		{
			id = GL_LIGHT5;
			break;
		}

		case LIGHT6:
		{
			id = GL_LIGHT6;
			break;
		}

		case LIGHT7:
		{
			id = GL_LIGHT7;
			break;
		}

		default:
		{
			id = 0;
			break;
		}
	}

	return id;
}

