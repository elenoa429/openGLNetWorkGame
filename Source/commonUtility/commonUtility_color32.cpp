//==============================================================================
// タイトル     :   32Bit浮動小数点の色用クラス
// ファイル名   :   commonUtility.color32.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/04/22
//==============================================================================

//==============================================================================
// 更新履歴: -2016/04/22 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "commonUtility_color32.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 関数名 : COLOR_F32()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
COLOR_F32::COLOR_F32()
{
	r = 0.0f;
	g = 0.0f;
	b = 0.0f;
	a = 0.0f;
}

//==============================================================================
// 関数名 : COLOR_F32( DWORD abgr )
// 引数   : void
// 戻り値 : void
// 説明   : 引数付きコンストラクタ
//==============================================================================
COLOR_F32::COLOR_F32( DWORD abgr )
{
	CONST float f = 1.0f / 255.0f;

	r = f * ( FLOAT )( unsigned char )( abgr >> 0 );
	g = f * ( FLOAT )( unsigned char )( abgr >> 8 );
	b = f * ( FLOAT )( unsigned char )( abgr >> 16 );
	a = f * ( FLOAT )( unsigned char )( abgr >> 24 );
}

//==============================================================================
// 関数名 : COLOR_F32( float r , float g , float b , float a )
// 引数   : void
// 戻り値 : void
// 説明   : 引数付きコンストラクタ
//==============================================================================
COLOR_F32::COLOR_F32( float r , float g , float b , float a )
{
	this->r = r;
	this->g = g;
	this->b = b;
	this->a = a;
}

//==============================================================================
// 関数名 : ~COLOR_F32()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
COLOR_F32::~COLOR_F32()
{
}

//==============================================================================
// 関数名 : operator DWORD() const
// 引数   : void
// 戻り値 : void
// 説明   : DWORD型へのキャスティングに関するオペレーター
//==============================================================================
COLOR_F32::operator DWORD() const
{
	DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : ( DWORD )( r * 255.0f + 0.5f );
	DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : ( DWORD )( g * 255.0f + 0.5f );
	DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : ( DWORD )( b * 255.0f + 0.5f );
	DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : ( DWORD )( a * 255.0f + 0.5f );

	return ( dwA << 24 ) | ( dwR << 16 ) | ( dwG << 8 ) | dwB;
}

//==============================================================================
// 関数名 : operator COLOR_U8() const
// 引数   : void
// 戻り値 : void
// 説明   : COLOR_U8型へのキャスティングに関するオペレーター
//==============================================================================
COLOR_F32::operator COLOR_U8() const
{
	COLOR_U8 col;

	col.r = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : ( unsigned char )( r * 255.0f + 0.5f );
	col.g = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : ( unsigned char )( g * 255.0f + 0.5f );
	col.b = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : ( unsigned char )( b * 255.0f + 0.5f );
	col.a = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : ( unsigned char )( a * 255.0f + 0.5f );

	return col;
}