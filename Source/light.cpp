//==============================================================================
// タイトル     :   ライトの基底クラス
// ファイル名   :   light.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/05/23
//==============================================================================

//==============================================================================
// 更新履歴: -2016/05/23 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "light.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================
CLight* CLight::m_apLight[ LIGHT_MAX ] = { NULL };
bool    CLight::m_allEnable = true;

//==============================================================================
// 関数名 : CLight()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CLight::CLight()
{
	m_id     = LIGHT_UNKWON;
	m_type   = LIGHT_TYPE_UNKWON;
	m_enable = false;
}

//==============================================================================
// 関数名 : ~CLight()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CLight::~CLight()
{

}

//==============================================================================
// 関数名 : void UpdateAll( void )
// 引数   : void
// 戻り値 : void
// 説明   : 登録されたインスタンス全ての更新処理
//==============================================================================
void CLight::UpdateAll( void )
{
	for( int i = 0 ; i < LIGHT_MAX ; i++ )
	{
		if( m_apLight[ i ] != NULL )
		{
			m_apLight[ i ]->Update();
		}
	}
}

//==============================================================================
// 関数名 : void ReleaseAll( void )
// 引数   : void
// 戻り値 : void
// 説明   : 登録されたインスタンス全ての解放処理
//==============================================================================
void CLight::ReleaseAll( void )
{
	for( int i = 0 ; i < LIGHT_MAX ; i++ )
	{
		if( m_apLight[ i ] != NULL )
		{
			m_apLight[ i ]->Uninit();		// 終了処理
			delete m_apLight[ i ];			// 解放処理
			m_apLight[ i ] = NULL;			// NULL埋め
		}
	}
}

//==============================================================================
// 関数名 : void SetLightAll( void )
// 引数   : void
// 戻り値 : void
// 説明   : 登録されたインスタンス全てのライト設定
//==============================================================================
void CLight::SetLightAll( void )
{
	if( m_allEnable )
	{
		glEnable( GL_LIGHTING );

		for( int i = 0 ; i < LIGHT_MAX ; i++ )
		{
			if( m_apLight[ i ] != NULL )
			{
				m_apLight[ i ]->Set( true );		// 設定処理
			}
		}
	}
	else
	{
		glDisable( GL_LIGHTING );

		for( int i = 0 ; i < LIGHT_MAX ; i++ )
		{
			if( m_apLight[ i ] != NULL )
			{
				m_apLight[ i ]->Set( false );		// 設定処理
			}
		}
	}
}

//==============================================================================
// 関数名 : bool Init( LIGHT_ID id )
// 引数   : LIGHT_ID id     : 生成対象のID
//          LIGHT_TYPE type : 生成するライトの種類
// 戻り値 : bool型          : 処理結果
// 説明   : 初期化処理( インスタンスの登録を行うため、派生先で必ず呼び出すこと！ )
//==============================================================================
bool CLight::Init( LIGHT_ID id , LIGHT_TYPE type )
{
	if( m_apLight[ id ] != NULL )
	{
		return false;			// 既にインスタンスが登録されていたため、処理失敗
	}

	m_apLight[ id ] = this;		// 自身をワークに登録
	m_enable        = false;	// 有効化フラグOFF
	m_type          = type;		// 種類の登録
	m_id            = id;		// IDの登録

	return true;				// 処理成功
}
