//==============================================================================
// タイトル     :   モデルデータ用基底クラス
// ファイル名   :   model.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/05
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/05 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// WARNING防止
//==============================================================================
#define _CRT_SECURE_NO_WARNINGS

//==============================================================================
// インクルードファイル
//==============================================================================
#include "model.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================
CModel* CModel::m_pTop = NULL;
CModel* CModel::m_pCur = NULL;

//==============================================================================
// 関数名 : CModel()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CModel::CModel()
{
	//--------------------------------------
	// [ インスタンスをリストに登録する ]
	//--------------------------------------
	CModel::LinkList();			// リストへの登録処理

	//--------------------------------------
	// [ パラメータ初期化 ]
	//--------------------------------------
	m_matNum   = 0;
	m_ppMatTex = NULL;
	memset( m_modelPath , 0 , sizeof( m_modelPath ) );
}

//==============================================================================
// 関数名 : ~CModel()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CModel::~CModel()
{

}

//==============================================================================
// 関数名 : void ReleaseAll( void )
// 引数   : void
// 戻り値 : void
// 説明   : リストに登録されたインスタンス全ての解放処理
//==============================================================================
void CModel::ReleaseAll( void )
{
	CModel* pCur = m_pTop;				// 現在参照しているポインタ
	CModel* pNext;						// 次に参照するポインタ

	while( pCur != NULL )				// リスト全てを参照するまで繰り返し
	{
		pNext = pCur->m_pNext;			// 次へのポインタを保持
		pCur->Uninit();					// 終了処理の呼び出し
		delete pCur;					// インスタンスの削除
		pCur = pNext;					// 次へのポインタを現在のポインタに格納
	}

	m_pTop = NULL;
	m_pCur = NULL;
}

//==============================================================================
// 関数名 : bool Init( char* modelPath )
// 引数   : char* modelPath : ファイルパス
// 戻り値 : bool型
// 説明   : 初期化処理
//==============================================================================
bool CModel::Init( char* modelPath )
{
	strcpy( m_modelPath , modelPath );		// 同一リソース判別のためのファイルパス保存

	return true;
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CModel::Uninit( void )
{
	if( m_ppMatTex != NULL )
	{
		delete[] m_ppMatTex;
		m_ppMatTex = NULL;
	}
}

//==============================================================================
// 関数名 : bool ModelPathCmp( char* modelPath )
// 引数   : void
// 戻り値 : void
// 説明   : ファイルパスの比較をする処理
//==============================================================================
bool CModel::ModelPathCmp( char* modelPath )
{
	return strcmp( m_modelPath , modelPath ) == 0 ? true : false;
}

//==============================================================================
// 関数名 : void LinkList( void )
// 引数   : void
// 戻り値 : void
// 説明   : リストへインスタンスを登録する処理
//==============================================================================
void CModel::LinkList( void )
{
	// リストに初めて自身を登録するとき
	if( m_pTop == NULL )
	{
		m_pTop = this;							// 自身しかいない＝先頭にあたるため
	}

	if( m_pCur == NULL )
	{
		m_pCur = this;							// 自身しかいない＝最後尾にあたるため
	}

	// リストのリンク処理
	m_pCur->m_pNext = this;						// 現在最後尾にあたる部分のNextを自身に設定

	if( m_pCur == this )
	{
		m_pPrev = NULL;							// 自身しかいない＝前にリストが存在しないため
	}
	else
	{
		m_pPrev = m_pCur;						// 最後尾が自身になるため
	}

	m_pCur = this;								// 最後尾を自身に登録
	m_pNext = NULL;								// 次はまだ存在しないため
}

//==============================================================================
// 関数名 : void UnlinkList( void )
// 引数   : void
// 戻り値 : void
// 説明   : リストのインスタンスを削除する処理
//==============================================================================
void CModel::UnlinkList( void )
{
	// 前にあるインスタンスに対する処理
	if( this == m_pTop )
	{
		m_pTop = m_pNext;
	}
	else
	{
		m_pPrev->m_pNext = m_pNext;		// 前にあるインスタンスに、自身の次のインスタンスへのポインタを登録
	}

	// 次にあるインスタンスに対する処理
	if( this == m_pCur )
	{
		m_pCur = m_pPrev;
	}
	else
	{
		m_pNext->m_pPrev = m_pPrev;		// 次にあるインスタンスに、自身の前のインスタンスへのポインタを登録
	}
}

//==============================================================================
// 関数名 : void Release( void )
// 引数   : void
// 戻り値 : void
// 説明   : 解放処理
//==============================================================================
void CModel::Release( void )
{
	UnlinkList();					// リストから解放
	this->Uninit();					// 終了処理の呼び出し
	delete this;					// インスタンス削除
}
