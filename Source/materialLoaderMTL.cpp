//==============================================================================
// タイトル     :   mtlファイルからのマテリアル読み込み用クラス
// ファイル名   :   materialLoaderMTL.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/06/13
//==============================================================================

//==============================================================================
// 更新履歴: -2016/06/13 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#define _CRT_SECURE_NO_WARNINGS

//==============================================================================
// インクルードファイル
//==============================================================================
#include "materialLoaderMTL.h"
#include "materialGL.h"
#include <stdio.h>

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : bool MaterialLoadMTL( char* pFileName , CMaterial** ppMaterial )
// 引数   : void
// 戻り値 : void
// 説明   : mtlファイルからのマテリアル読み込み処理
//==============================================================================
bool CMaterialLoaderMTL::MaterialLoadMTL( char* pFileName , CMaterial** ppMaterial )
{
	// ファイルオープン
	FILE* fp = fopen( pFileName , "rt" );

	if( fp == NULL )
	{
		return false;	// ファイルオープン失敗により処理失敗
	}

	// 各要素の読み込み
	COLOR_F32 ambient  = COLOR_F32( 0.0f , 0.0f , 0.0f , 1.0f );
	COLOR_F32 diffuse  = COLOR_F32( 0.0f , 0.0f , 0.0f , 1.0f );
	COLOR_F32 specular = COLOR_F32( 0.0f , 0.0f , 0.0f , 1.0f );
	COLOR_F32 emission = COLOR_F32( 0.0f , 0.0f , 0.0f , 1.0f );

	float shininess = 0.0f;
	bool isShininess = false;

	while( 1 )
	{
		// トークン取得
		char token[ 256 ] = { 0 };

		fscanf( fp , "%s" , token );

		// ファイルの終端まで到達により処理終了
		if( feof( fp ) != 0 )
		{
			break;
		}

		// トークン解析
		if( strcmp( token , "Ka" ) == 0 )
		{
			fscanf( fp , "%f%f%f" , &ambient.r , &ambient.g , &ambient.b );
		}
		else if( strcmp( token , "Kd" ) == 0 )
		{
			fscanf( fp , "%f%f%f" , &diffuse.r , &diffuse.g , &diffuse.b );
		}
		else if( strcmp( token , "Ks" ) == 0 )
		{
			fscanf( fp , "%f%f%f" , &specular.r , &specular.g , &specular.b );
		}
		else if( strcmp( token , "illum" ) == 0 )
		{
			int flags = 0;

			fscanf( fp , "%d" , &flags );

			if( flags == 2 )
			{
				isShininess = true;
			}
		}
		else if( strcmp( token , "Ns" ) == 0 )
		{
			fscanf( fp , "%f" , &shininess );
		}
		else if( strcmp( token , "Tr" ) == 0 )
		{
		}
		else if( strcmp( token , "map_Kd" ) == 0 )
		{
		}
	}

	// データ格納
	ppMaterial[ 0 ] = new CMaterialGL;

	ppMaterial[ 0 ]->m_ambient           = ambient;
	ppMaterial[ 0 ]->m_diffuse           = diffuse;
	ppMaterial[ 0 ]->m_specular          = specular;
	ppMaterial[ 0 ]->m_emission          = emission;
	ppMaterial[ 0 ]->m_shininess         = shininess;
	ppMaterial[ 0 ]->m_isShininessEnable = isShininess;

	// ファイルクローズ
	fclose( fp );

	return true;
}

