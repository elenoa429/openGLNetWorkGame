//==============================================================================
// タイトル     :   モデルビューアー用ステータスバー処理
// ファイル名   :   MV_statusBar.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/11 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// WARNING防止
//==============================================================================
#define _CRT_SECURE_NO_WARNINGS

//==============================================================================
// インクルードファイル
//==============================================================================
#include "MV_statusBar.h"
#include "modelViewerProc.h"
#include "manager.h"
#include <CommCtrl.h>
#include <stdio.h>

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================
#pragma comment( lib , "comctl32.lib" )		// コモンコントロール用

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================
#define STATUS_BAR_ID	( 501 )

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CStatusBar()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CStatusBar::CStatusBar()
{
	m_hParent = NULL;
	m_hStatus = NULL;
}

//==============================================================================
// 関数名 : bool Init( HWND hParent )
// 引数   : HWND hParent : 親ハンドル
// 戻り値 : bool型
// 説明   : 生成処理
//==============================================================================
CStatusBar* CStatusBar::Create( HWND hParent )
{
	CStatusBar* newInstance = new CStatusBar;

	if( newInstance->Init( hParent ) == false )
	{
		delete newInstance;
		newInstance = NULL;
	}

	return newInstance;
}

//==============================================================================
// 関数名 : void Release( void )
// 引数   : void
// 戻り値 : void
// 説明   : 解放処理
//==============================================================================
void CStatusBar::Release( void )
{
	delete this;
}

//==============================================================================
// 関数名 : bool Init( HWND hParent )
// 引数   : HWND hParent : 親ハンドル
// 戻り値 : bool型
// 説明   : 初期化処理
//==============================================================================
bool CStatusBar::Init( HWND hParent )
{
	m_hParent = hParent;

	m_hStatus = CreateStatusWindow(
		WS_CHILD | WS_VISIBLE | CCS_BOTTOM | WS_CLIPCHILDREN ,
		"" , hParent , STATUS_BAR_ID );

	return true;
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CStatusBar::Update( void )
{
	DrawStatus();

	// 描画オーダー
	InvalidateRect( m_hStatus , NULL , FALSE );
}

//==============================================================================
// 関数名 : void DrawStatus( void )
// 引数   : void
// 戻り値 : void
// 説明   : ステータス表示処理
//==============================================================================
void CStatusBar::DrawStatus( void )
{
	// 座標の描画
	char str[ 256 ] = { 0 };
	CCameraGL* pCamera = GetManager()->GetCamera();

	if( pCamera == NULL )
	{
		return;
	}


	VECTOR3 posV = pCamera->GetPosV();

	sprintf( str , "CameraEye ( X = %3.3f ; Y = %3.3f ; Z = %3.3f )\n" , posV.x , posV.y , posV.z );

	SendMessage( m_hStatus , SB_SETTEXT , 0 , ( LPARAM )str );
}

