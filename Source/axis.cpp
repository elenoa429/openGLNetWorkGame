//==============================================================================
// タイトル     :   軸描画用クラス
// ファイル名   :   axis.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/08
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/08 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "axis.h"
#include "rendererGL.h"

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 関数名 : CAxis()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CAxis::CAxis()
{
	m_from         = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_to           = VECTOR3( 0.0f , 0.0f , 0.0f );
	m_vold         = 0.0f;
	m_col          = COLOR_F32( 0.0f , 0.0f , 0.0f , 0.0f );
	m_isDrawEnable = true;

	MatrixIdentity( &m_mtxWorld );
}

//==============================================================================
// 関数名 : ~CAxis()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CAxis::~CAxis()
{
}

//==============================================================================
// 関数名 : CAxis* Create( VECTOR3 from , VECTOR3 to , float vold , COLOR_F32 col )
// 引数   : VECTOR3 from  : 開始地点
//          VECTOR3 to    : 終了地点
//          float vold    : 線の太さ
//          COLOR_F32 col : 色
// 戻り値 : CAxis*型
// 説明   : 生成処理
//==============================================================================
CAxis* CAxis::Create( VECTOR3 from , VECTOR3 to , float vold , COLOR_F32 col )
{
	CAxis* pNewInstance = new CAxis;

	if( pNewInstance->Init( from , to , vold , col ) == false )
	{
		pNewInstance->Release();
		pNewInstance = NULL;
	}

	return pNewInstance;
}

//==============================================================================
// 関数名 : bool Init( VECTOR3 from , VECTOR3 to , float len , float vold , COLOR_F32 col )
// 引数   : VECTOR3 from  : 開始地点
//          VECTOR3 to    : 終了地点
//          float vold    : 線の太さ
//          COLOR_F32 col : 色
// 戻り値 : bool型
// 説明   : 初期化処理
//==============================================================================
bool CAxis::Init( VECTOR3 from , VECTOR3 to , float vold , COLOR_F32 col )
{
	//---------------------------------
	// [ 値初期化 ]
	//---------------------------------
	m_from = from;
	m_to   = to;
	m_vold = vold;
	m_col  = col;

	return true;		// 処理成功
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CAxis::Uninit( void )
{
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CAxis::Update( void )
{

}

//==============================================================================
// 関数名 : void Draw( void )
// 引数   : void
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CAxis::Draw( void )
{
	if( m_isDrawEnable )
	{
		//---------------------------------
		// [ 描画前処理 ]
		//---------------------------------
		glMatrixMode( GL_MODELVIEW );
		glPushMatrix();

		glDisable( GL_BLEND );
		glBlendFunc( GL_ONE , GL_ZERO );

		glLineWidth( m_vold );

		glDisable( GL_LIGHTING );
		glDisable( GL_DEPTH_TEST );
		glDisable( GL_TEXTURE_2D );

		//---------------------------------
		// [ ワールドマトリクス算出 ]
		//---------------------------------
		MATRIX mtxScl , mtxRot , mtxTrans;

		MatrixIdentity( &m_mtxWorld );

		//MatrixScaling( &mtxScl , m_scl.x , m_scl.y , m_scl.z );
		//MatrixMultiply( &m_mtxWorld , &m_mtxWorld , &mtxScl );

		//MatrixRotationYawPitchRoll( &mtxRot , m_rot.y , m_rot.x , m_rot.z );
		//MatrixMultiply( &m_mtxWorld , &m_mtxWorld , &mtxRot );

		//MatrixTranslation( &mtxTrans , m_pos.x , m_pos.y , m_pos.z );
		//MatrixMultiply( &m_mtxWorld , &m_mtxWorld , &mtxTrans );

		glMultMatrixf( m_mtxWorld.m );

		//---------------------------------
		// [ 描画処理 ]
		//---------------------------------
		glBegin( GL_LINES );
		{
			glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
			glVertex3f( m_from.x , m_from.y , m_from.z );

			glColor4f( m_col.r , m_col.g , m_col.b , m_col.a );
			glVertex3f( m_to.x , m_to.y , m_to.z );
		}
		glEnd();

		//---------------------------------
		// [ 描画後処理 ]
		//---------------------------------
		glMatrixMode( GL_MODELVIEW );
		glPopMatrix();

		glDisable( GL_BLEND );
		glBlendFunc( GL_ONE , GL_ZERO );

		glLineWidth( 1.0f );

		glEnable( GL_LIGHTING );
		glEnable( GL_DEPTH_TEST );
		glEnable( GL_TEXTURE_2D );
	}
}
