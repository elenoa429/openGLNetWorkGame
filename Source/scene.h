//==============================================================================
// タイトル     :   シーンクラス
// ファイル名   :   scene.h
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/04/19
//==============================================================================

//==============================================================================
// 更新履歴: -2016/04/19 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードガード
//==============================================================================
#pragma once

//==============================================================================
// インクルードファイル
//==============================================================================
#include "rendererDX.h"

//==============================================================================
// マクロ定義
//==============================================================================
#define LIMIT_INSTANCE	( 256 )					// リストに登録できるインスタンスの最大数

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// クラス宣言
//==============================================================================
class CScene
{
	//---------------------------------------------
	// [ 列挙型 ]
	//---------------------------------------------
public:
	enum OBJ_TYPE
	{												/* ==オブジェクトの種類== */
		OBJ_TYPE_UNKNOWN = 0 ,							// 不定形( 困ったらこれで )
		OBJ_TYPE_PLAYER ,								// プレイヤー
		OBJ_TYPE_ENEMY ,								// エネミー
		OBJ_TYPE_3D,									// 3Dオブジェクト
		OBJ_TYPE_MESH ,									// メッシュオブジェクト
		OBJ_TYPE_BILLBOARD ,							// ビルボードオブジェクト
		OBJ_TYPE_UI,									// UIオブジェクト
		OBJ_TYPE_MAX ,									// 総数
	};

	enum PRIORITY_TYPE
	{												/* ==描画優先度の種類( 番号が若いほど先に描画する )== */
		PRIORITY_TYPE_BG = 0,							// 背景系
		PRIORITY_TYPE_3D,								// 一般3Dオブジェクト系
		PRIORITY_TYPE_EFFECT,							// エフェクト系( 主にビルボードの加算合成エフェクトで利用 )
		PRIORITY_TYPE_UI,								// 2DUI系
		PRIORITY_TYPE_MAX,								// 総数
	};

	//---------------------------------------------
	// [ メンバ関数 ]
	//---------------------------------------------
public:
	CScene( int priority = PRIORITY_TYPE_BG , OBJ_TYPE type = OBJ_TYPE_UNKNOWN );
	~CScene();

	static void UpdateAll( void );
	static void DrawAll( void );
	static void ReleaseAll( void );

	void Release( void );
	virtual bool Init( void ){ return true; }
	virtual void Uninit( void ) = 0;
	virtual void Update( void ) = 0;
	virtual void Draw( void ) = 0;

	static CScene* GetSceneTop( int priority ){ return m_pTop[ priority ]; }

	OBJ_TYPE GetType( void ){ return m_type; }
	CScene* GetSceneNext( void ){ return m_pNext; }

private:
	void LinkList( int priority );
	void UnlinkList( int priority );

	//---------------------------------------------
	// [ メンバ変数 ]
	//---------------------------------------------
protected:
	static CScene* m_pTop[ PRIORITY_TYPE_MAX ];		// リストの先頭ポインタ
	static CScene* m_pCur[ PRIORITY_TYPE_MAX ];		// リストの現在位置のポインタ

	CScene* m_pPrev;								// リストの前参照用ポインタ
	CScene* m_pNext;								// リストの後参照用ポインタ

	OBJ_TYPE m_type;								// シーンのタイプ
	int m_priority;									// 優先度
};

//==============================================================================
// プロトタイプ宣言
//==============================================================================
