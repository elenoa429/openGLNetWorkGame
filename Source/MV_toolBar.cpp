//==============================================================================
// タイトル     :   モデルビューアー用ツールバー処理
// ファイル名   :   MV_toolBar.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/11 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// WARNING防止
//==============================================================================
#define _CRT_SECURE_NO_WARNINGS

//==============================================================================
// インクルードファイル
//==============================================================================
#include "MV_toolBar.h"
#include "modelViewerProc.h"
#include "manager.h"
#include <CommCtrl.h>
#include "MV_menuBar.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================
#pragma comment( lib , "comctl32.lib" )		// コモンコントロール用

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================
#define TOOL_BAR_ID		( 601 )

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================
const TBBUTTON CToolBar::m_tbButton[ 2 ] = {
	{ STD_FILEOPEN , CMenuBar::FILE_OPEN , TBSTATE_ENABLED , TBSTYLE_BUTTON , 0 , 0 , 0 } ,
	{ STD_HELP     , 2 , TBSTATE_ENABLED , TBSTYLE_BUTTON , 0 , 0 , 0 } ,
};

//==============================================================================
// 関数名 : CToolBar()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CToolBar::CToolBar()
{
	m_hParent = NULL;
	m_hTool   = NULL;
}

//==============================================================================
// 関数名 : bool Init( HWND hParent )
// 引数   : HWND hParent : 親ハンドル
// 戻り値 : bool型
// 説明   : 生成処理
//==============================================================================
CToolBar* CToolBar::Create( HWND hParent )
{
	CToolBar* newInstance = new CToolBar;

	if( newInstance->Init( hParent ) == false )
	{
		delete newInstance;
		newInstance = NULL;
	}

	return newInstance;
}

//==============================================================================
// 関数名 : void Release( void )
// 引数   : void
// 戻り値 : void
// 説明   : 解放処理
//==============================================================================
void CToolBar::Release( void )
{
	delete this;
}

//==============================================================================
// 関数名 : bool Init( HWND hParent )
// 引数   : HWND hParent : 親ハンドル
// 戻り値 : bool型
// 説明   : 初期化処理
//==============================================================================
bool CToolBar::Init( HWND hParent )
{
	m_hParent = hParent;

	m_hTool = CreateToolbarEx(
		hParent ,
		WS_CHILD | WS_VISIBLE | WS_CLIPCHILDREN ,
		TOOL_BAR_ID ,
		2 ,
		( HINSTANCE )HINST_COMMCTRL ,
		IDB_STD_SMALL_COLOR ,
		m_tbButton , 2 , 0 , 0 , 0 , 0 , sizeof( TBBUTTON )
	);

	return m_hTool != NULL ? true : false;
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CToolBar::Update( void )
{
	InvalidateRect( m_hTool , NULL , FALSE );
}
