//==============================================================================
// タイトル     :   3D当たり判定基底クラス
// ファイル名   :   collider3D.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/11/29
//==============================================================================

//==============================================================================
// 更新履歴: -2016/11/29 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "collider3D.h"
#include "commonUtility.h"
#include "manager.h"
#include "renderer.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================
bool CCollider3D::m_isDebugDraw = COLLIDER_DEBUG_MODE ? true : false;

//==============================================================================
// 関数名 : CCollider3D()
// 引数   : void
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CCollider3D::CCollider3D()
{
	m_isEneble = true;
	m_pos.x    = 0.0f;
	m_pos.y    = 0.0f;
	m_pos.z    = 0.0f;

	//m_pDebugModel = NULL;
}

//==============================================================================
// 関数名 : ~CCollider3D()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CCollider3D::~CCollider3D()
{
}

//==============================================================================
// 関数名 : void Release()
// 引数   : void
// 戻り値 : void
// 説明   : 解放処理
//==============================================================================
void CCollider3D::Release()
{
	this->Uninit();
	delete this;
}

//==============================================================================
// 関数名 : void Uninit()
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CCollider3D::Uninit()
{
	//if( m_pDebugModel != NULL )
	//{
	//	m_pDebugModel = NULL;
	//}
}

//==============================================================================
// 関数名 : void Draw()
// 引数   : void
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CCollider3D::Draw()
{
	//if( m_isDebugDraw )
	//{
	//	CRenderer* pRenderer = GetManager()->GetRenderer();
	//	DWORD matNum = m_pDebugModel->GetMaterialNum();
	//
	//	for( DWORD i = 0 ; i < matNum ; i++ )
	//	{
	//		m_pDebugModel->SetMaterial( i );
	//		m_pDebugModel->SetMatTexture( i );
	//		m_pDebugModel->DrawSubset( i );
	//	}
	//
	//	CMaterialGL pDefMat;
	//
	//	pDefMat.Set();							// 初期マテリアル設定
	//}
}

//==============================================================================
// 関数名 : bool Init( char* modelFilePath )
// 引数   : char* modelFilePath : 当たり判定用モデルのファイルパス
// 戻り値 : void
// 説明   : 初期化処理
//==============================================================================
bool CCollider3D::Init( char* modelFilePath )
{
	//CRenderer* pRenderer = GetManager()->GetRenderer();
	//
	//return pRenderer->CreateModel( modelFilePath , &m_pDebugModel );

	return true;
}

//==============================================================================
// 関数名 : void SetHitEffect( bool isHit )
// 引数   : bool isHit : 当たり判定フラグ
// 戻り値 : void
// 説明   : あたった時にマテリアルを変更し、当たったことを確認する処理
//==============================================================================
void CCollider3D::SetHitEffect( bool isHit )
{
	//// 色設定
	//D3DXCOLOR matDiffuseCol;

	//if( isHit )
	//{
	//	matDiffuseCol = D3DXCOLOR( 1.0f , 0.2f , 0.2f , 0.8f );
	//}
	//else
	//{
	//	matDiffuseCol = D3DXCOLOR( 1.0f , 1.0f , 1.0f , 0.8f );
	//}

	//// マテリアルへ色を反映
	//DWORD matNum = m_pDebugModel->GetMaterialNum();

	//for( DWORD i = 0 ; i < matNum ; i++ )
	//{
	//	D3DXMATERIAL* pMat = m_pDebugModel->GetMaterial( i );
	//	pMat->MatD3D.Diffuse = matDiffuseCol;
	//}

}

//==============================================================================
// 関数名 : サンプル
// 引数   : void
// 戻り値 : void
// 説明   : サンプル処理
//==============================================================================

