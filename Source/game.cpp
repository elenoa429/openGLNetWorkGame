//==============================================================================
// タイトル     :   ゲームモードオブジェクト
// ファイル名   :   game.cpp
// 作成者       :   AT13B284 21 数藤凌哉
// 作成日       :   2016/07/11
//==============================================================================

//==============================================================================
// 更新履歴: -2016/07/11 数藤凌哉
//           ・制作開始
//==============================================================================

//==============================================================================
// インクルードファイル
//==============================================================================
#include "game.h"
#include "result.h"

#include "skyBox.h"

#include "scene.h"
#include "result.h"
#include "fade.h"
#include "sceneGL2D.h"
#include "timeCount.h"
#include "player.h"
#include "otherPlayer.h"
#include "wall.h"

//==============================================================================
// ライブラリへのリンク設定
//==============================================================================

//==============================================================================
// 列挙型宣言
//==============================================================================

//==============================================================================
// マクロ定義
//==============================================================================

//==============================================================================
// 構造体宣言
//==============================================================================

//==============================================================================
// プロトタイプ宣言
//==============================================================================

//==============================================================================
// グローバル宣言
//==============================================================================

//==============================================================================
// 静的変数
//==============================================================================

//==============================================================================
// 関数名 : CGame( int playerId , int playerType )
// 引数   : int playerId   : プレイヤーのネットワークID( 0 〜 ( PLAYER_MAX - 1 ) まで )
//          int playerType : プレイヤータイプ
// 戻り値 : void
// 説明   : デフォルトコンストラクタ
//==============================================================================
CGame::CGame( int playerId , int playerType )
{
	m_playerId   = playerId;
	m_playerType = playerType;
	m_pTiemCount = NULL;

	memset( m_pCharcterArray , 0 , sizeof( m_pCharcterArray ) );
}

//==============================================================================
// 関数名 : ~CGame()
// 引数   : void
// 戻り値 : void
// 説明   : デストラクタ
//==============================================================================
CGame::~CGame()
{

}

//==============================================================================
// 関数名 : bool Init( void )
// 引数   : void
// 戻り値 : void
// 説明   : 初期化処理
//==============================================================================
bool CGame::Init( void )
{
	srand( ( unsigned )time( NULL ) );

	//---------------------------------------------
	// [ 各シーンの生成 ]
	//---------------------------------------------
	VECTOR3 initialPos[ PLAYER_MAX ] = {
		VECTOR3( -30.0f , 0.0f , -30.0f ),
		VECTOR3( 30.0f , 0.0f , -30.0f ),
		VECTOR3( -30.0f , 0.0f , 30.0f ),
		VECTOR3( 30.0f , 0.0f , 30.0f ),
	};

	CSkyBox::Create( "data\\TEXTURE\\skyBox00.png" );
	CSceneGL2D::Create( "data\\TEXTURE\\sample00_RGB24.bmp" );
	
	m_pTiemCount = CTimeCount::Create( 4 , VECTOR3( SCREEN_WIDTH * 0.1f , SCREEN_HEIGHT * 0.1f , 0.0f ) , VECTOR3( SCREEN_WIDTH * 0.1f , SCREEN_WIDTH * 0.05f , 0.0f ) , 5 , 2 , "data\\TEXTURE\\number200.png" );
	m_pTiemCount->SetColor( COLOR_F32( 0.5f , 0.5f , 0.5f , 1.0f ) );
	m_pTiemCount->SetOutputLeftZeroEnable( false );
	m_pTiemCount->SetTime( 1100 );

	// プレイヤー生成
	m_pCharcterArray[ m_playerId ] = CPlayer::Create( m_playerType );

	// 他のプレイヤーの生成と初期位置設定
	for( int i = 0 ; i < PLAYER_MAX ; i++ )
	{
		if( i != m_playerId )
		{
			m_pCharcterArray[ i ] = COtherPlayer::Create( i );
		}

		m_pCharcterArray[ i ]->SetPos( initialPos[ i ] );
		m_pCharcterArray[ i ]->SetId( i );
	}

	CWall::Create();

	//CSoundAL::GetSound()->Play(CSound::SOUND_LABEL_BGM_TEST00);

	return true;
}

//==============================================================================
// 関数名 : void Uninit( void )
// 引数   : void
// 戻り値 : void
// 説明   : 終了処理
//==============================================================================
void CGame::Uninit( void )
{
	//---------------------------------------------
	// [ 各シーンの解放処理 ]
	//---------------------------------------------
	CSoundAL::GetSound()->Stop();
	CScene::ReleaseAll();
}

//==============================================================================
// 関数名 : void Update( void )
// 引数   : void
// 戻り値 : void
// 説明   : 更新処理
//==============================================================================
void CGame::Update( void )
{
	//---------------------------------------------
	// [ 各シーンの更新処理 ]
	//---------------------------------------------
	CScene::UpdateAll();

	//---------------------------------------------
	// [ モード切り替え ]
	//---------------------------------------------
	CInput* pInput = CInput::GetInput( INPUT_TYPE_DX_KEYBOARD );

	bool isTriggerSpace = false;

	if (pInput != NULL) {
		isTriggerSpace = pInput->GetTrigger(DIK_SPACE);
	}

	if( pInput != NULL )
	{
		if( pInput->GetTrigger( DIK_RETURN ) )
		{
			CFade::FadeStart( new CResult , 60 );
		}
	}
	
	if (isTriggerSpace)
	{
		CSoundAL::GetSound()->Play(CSound::SOUND_LABEL_SE_TEST00);
	}
}

//==============================================================================
// 関数名 : void Draw( void )
// 引数   : void
// 戻り値 : void
// 説明   : 描画処理
//==============================================================================
void CGame::Draw( void )
{
	//---------------------------------------------
	// [ 各シーンの描画処理 ]
	//---------------------------------------------
	CScene::DrawAll();
}

//==============================================================================
// 関数名 : CCharcter* GetCharcter( int index )
// 引数   : int index
// 戻り値 : CCharcter*型
// 説明   : プレイヤーポインター処理
//==============================================================================
CCharcter* CGame::GetCharcter( int index )
{
	if( index < 0 || index >= PLAYER_MAX )
	{
		return NULL;
	}

	return m_pCharcterArray[ index ];
}
